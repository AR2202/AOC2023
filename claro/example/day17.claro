
alias Coordinate: tuple<int,int>
alias Heatloss: int
alias HeatLossMap: {Coordinate:Heatloss}
atom Horizontal 
atom Vertical

function list2map<T,S>(l:[tuple<T,S>]) -> {T:S}{
    return {elem[0]:elem[1] | elem in l};
}

function listMut2mapMut<T,S>(l: mut[tuple<T,S>]) -> mut{T:S}{
    return mut {elem[0]:elem[1] | elem in l};
}
function concat<T>(l: [[T]]) -> [T]{
    var concatlist: mut[T] = mut [];
    for (sublist in l){
        
        _ = lists::addAll(concatlist,sublist);
    }
    return copy(concatlist);
}

function concatMut<T>(l:  [mut[T]]) -> mut[T]{
    var concatlist: mut [T] = mut [];
    for (sublist in l){
        var sublistImmutable: [T] = copy(sublist);
        
        _ = lists::addAll(concatlist,sublistImmutable);
    }
    return concatlist;
}
function concatMap<T,S>(l:[T], fn:function<T -> [S]>)-> [S]{
    var mapped = fp::map(l, fn);
    return concat(mapped);

}

function heatloss(coord: Coordinate, newCoord: Coordinate, hmap: HeatLossMap) -> Heatloss {
    var hloss: int = 0;
    var x = coord[0];
    var y = coord[1];
    var xn = newCoord[0];
    var yn = newCoord[1];
    if (x == xn){
        var newY = y + 1;
        while (newY <= yn){
            hloss = hloss + hmap[(xn,newY)];
            newY ++;
        }
        newY = y - 1;
        while (newY >= yn){
            hloss = hloss + hmap[(xn,newY)];
            newY --;
        }
    }
    else{
        var newX = x + 1;
        while (newX <= xn){
            hloss = hloss + hmap[(newX,yn)];
            newX ++;
        }
        newX = x - 1;
        while (newX >= xn){
            hloss = hloss + hmap[(newX,yn)];
            newX --;
        }
    }
    return hloss;
    

}
function reachable(current: struct {coord: Coordinate, from: Coordinate}, hmap: HeatLossMap) -> [tuple<Coordinate,tuple<Heatloss, Coordinate>>]{
    var x = current.coord[0];
    
    var y = current.coord[1];

    var xPrev = current.from[0];

    if (x == xPrev){

        return [((xnew, y),(heatloss((x,y), (xnew,y), hmap), current.coord)) | xnew in [x-1, x-2, x-3,x+1, x+2, x+3] where (xnew, y) in hmap];
    }
    else {

        return [((x, ynew),(heatloss((x,y), (x,ynew), hmap), current.coord)) | ynew in [y-1, y-2, y-3,y+1, y+2, y+3] where (x, ynew) in hmap];
    }

    
}

function verticalOrHorizontal(coord: Coordinate, prev: Coordinate) -> oneof<Horizontal,Vertical>{
    if (coord[0] == prev[0]){
        return Horizontal;
    }
    else{
        return Vertical;
    }
}

function addIfAbsent(m:  mut {tuple<Coordinate, Coordinate, oneof<Horizontal, Vertical>>:Heatloss} , e: tuple<tuple<Coordinate, Coordinate, oneof<Horizontal, Vertical>>,Heatloss>)  -> mut {tuple<Coordinate, Coordinate, oneof<Horizontal, Vertical>>:Heatloss} {    m[e[0]] = e[1]; 
    return m;
}

function add2ValueSet(m:  mut {Coordinate: mut{tuple<Coordinate, oneof<Horizontal, Vertical>,Heatloss>} } , e: tuple<Coordinate,tuple<Heatloss, Coordinate>>)  -> mut {Coordinate: mut{tuple<Coordinate, oneof<Horizontal, Vertical>,Heatloss>} } {    
    var newSet :mut{tuple<Coordinate, oneof<Horizontal, Vertical>,Heatloss>} ;
    if (not(e[0] in m)){
        newSet  = sets::emptyMutSet();
        
    }
    else{
        newSet  = m[e[0]];
        
    }
    _ = sets::add(newSet, (e[1][1], verticalOrHorizontal(e[0],e[1][1]),e[1][0]));
    m[e[0]] = newSet;
   
    return m;
}
function min(i:int, j:int) -> int{
    if (i < j){
        return i;
    }
    else{
        return j;
    }
}

function findMinCost(coord: Coordinate, direction: oneof<Horizontal, Vertical>, m : mut {Coordinate: mut{tuple<Coordinate, oneof<Horizontal, Vertical>,Heatloss>} }, mincostV : mut {Coordinate :  Heatloss} , mincostH : mut {Coordinate :  Heatloss}) -> Heatloss{
    if (coord == (0,0)){
        return 0;
    }
    else if ((coord in mincostV)and (direction ==Vertical)){
        return mincostV[coord];

    }
    else if ((coord in mincostH)and (direction == Horizontal)){
        return mincostH[coord];

    }
    else{
        #print(coord);
        var heatLossSet = m [coord];
       # print(heatLossSet);
        var possiblePaths:[tuple<oneof<Vertical,Horizontal>,Heatloss>] = [(e[1],e[2]+ findMinCost(e[0],flipDirection(e[1]),m,mincostV,mincostH) )| e in heatLossSet];
        # now add those to the mincostV and mincostH maps
       # print("possible paths:");
      #  print(possiblePaths);
       var verticalPaths = fp::filter(possiblePaths,e->e[0] == Vertical);
       var verticalCosts = [e[1] | e in verticalPaths];
       var horizontalPaths = fp::filter(possiblePaths,e->e[0] == Horizontal);
       var horizontalCosts = [e[1] | e in horizontalPaths];
       var minh : Heatloss = fp::reduce(horizontalCosts, min, 10000000);
       var minv : Heatloss = fp::reduce(verticalCosts,  min, 1000000);
       mincostH[coord] = minh;
       mincostV[coord] = minv;
    
   # print(possiblePaths);
   # return 0;}

    }
    if (direction == Horizontal){
         return mincostH[coord];

    }
    else{
         return mincostV[coord];
    }
}

function flipDirection(direction: oneof<Horizontal,Vertical>)->oneof<Horizontal,Vertical>{
    if (direction == Horizontal){
        return Vertical;
    }
    else{
        return Horizontal;
    }
}

function findShortestPath(startcoord: Coordinate, endcoord: Coordinate, hmap: HeatLossMap) -> Heatloss {
    
    var visited: mut{tuple<Coordinate, oneof<Horizontal, Vertical>>} = sets::emptyMutSet();
    # from start, we can go anywhere
    var horizontalStarts = reachable({coord = startcoord,from = (0,-1)},hmap);
    # assuming start is (0,0)
    var verticalStarts = reachable({coord = startcoord,from = (-1,0)},hmap);
    # assuming start is (0,0)
    var allStarts: mut [tuple<Coordinate,tuple<Heatloss, Coordinate>>] = mut [];
    
    _ = lists::addAll(allStarts, horizontalStarts);
    _ = lists::addAll(allStarts, verticalStarts);
    
    var costMap: mut {Coordinate: mut{tuple<Coordinate, oneof<Horizontal, Vertical>,Heatloss>} } = listMut2mapMut(mut [(coord[0], mut{(coord[1][1], verticalOrHorizontal(coord[0],coord[1][1]),coord[1][0] ),(coord[1][1], verticalOrHorizontal(coord[0],coord[1][1]),coord[1][0] )})| coord in allStarts]);
    
  
  
    _ = sets::addAllFromList(visited, [(startcoord,Horizontal),(startcoord,Vertical)]);

    # make  immutable  copy of allStarts
    # so filter can be used on it
    var immutableAllStarts : [tuple<Coordinate,tuple<Heatloss, Coordinate>>] = copy(allStarts);
    var filtertedAllStarts = fp::filter(immutableAllStarts, x -> not ((x[0], verticalOrHorizontal(x[0],x[1][1])) in visited));
    var nextStarts : mut[tuple<Coordinate,tuple<Heatloss, Coordinate>>] = copy(filtertedAllStarts);

    while (not(lists::isEmptyInMut(nextStarts))){
        
    # while allStarts is not empty,
    # find reachable from each startcoord, concatenate the list
    # add to the visited Set and minCostMap, then make the reachable list the new allStarts list, filtering out any that were already in visited
    # for this, first it has to be determined if they were visited horizontally or vertically

        var immutableCopy  : [tuple<Coordinate,tuple<Heatloss, Coordinate>>] = copy(nextStarts);
        var nextReachable : [tuple<Coordinate,tuple<Heatloss, Coordinate>>] = concatMap(immutableCopy, x -> reachable({coord = x[0], from = x[1][1]},hmap));
       # maps::putAll(minCostMap,list2map(nextReachable));
        #print(minCostMap);
        
       #costMap = fp::reduce( [((coord[0], coord[1][1], verticalOrHorizontal(coord[0],coord[1][1])),coord[1][0] )| coord in nextReachable],  addIfAbsent, costMap);
       costMap = fp::reduce(  nextReachable,  add2ValueSet, costMap);
    
        
        _ = sets::addAllFromList(visited, [(coord[0], verticalOrHorizontal(coord[0],coord[1][1]))| coord in nextStarts]);


        var filteredNextReachable = fp::filter(nextReachable, x -> not ((x[0], verticalOrHorizontal(x[0],x[1][1])) in visited));
       
        nextStarts = copy(filteredNextReachable);

     }

    #print(endcoord);
    #print(costMap);
    
    # costMap is not quite the right format for looking up the cost yet
    # it needs to map the coordinate to a lset of coordinates it can be reached from with the associated cost and the direction


    #print(costMap);
    var minCostHorizontal = findMinCost(endcoord, Horizontal,costMap,mut{},mut{});
    #print(minCostHorizontal);
    var minCostVertical = findMinCost(endcoord, Vertical,costMap,mut{},mut{});
    #print(minCostVertical);
    if (minCostHorizontal == 0){
        return minCostVertical;

    }
    else if (minCostVertical == 0){
        return minCostHorizontal;
    }
    else{
        return min(minCostHorizontal,minCostVertical);
    }


}
var exmap = {(0,0):2,
             (1,0):4,
             (2,0):1,
             (3,0):3,
             (4,0):4,
             (5,0):3,
             (6,0):2,
             (7,0):3,
             (8,0):1,
             (9,0):1,
             (10,0):3,
             (11,0):2,
             (12,0):3,
             (0,1):3,
             (1,1):2,
             (2,1):1,
             (3,1):5,
             (4,1):4,
             (5,1):5,
             (6,1):3,
             (7,1):5,
             (8,1):3,
             (9,1):5,
             (10,1):6,
             (11,1):2,
             (12,1):3
            
             };
var exmapSmall = {(0,0):2,
             (1,0):4,
            
             (1,1):2

             };
print(exmap);
print(findShortestPath((0,0), (1,1),exmapSmall));